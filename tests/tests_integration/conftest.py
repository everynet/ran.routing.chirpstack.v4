import asyncio
import secrets
import uuid
from typing import Any

import pytest

from lib.chirpstack.devices import ApplicationDeviceList
from lib.chirpstack.multicast_groups import ApplicationMulticastGroupList
from lib.mqtt import MQTTClient
from lib.traffic.chirpstack import ChirpstackTrafficRouter

from .ext_chirpstack_api import ChirpStackExtendedApi
from .lorawan import make_uplink  # required fixture  # noqa


@pytest.fixture(
    params=[
        "eu868",
        # Uncomment other regions, when channels tests added
        # "us915",
        # "as923",
        # "as923_2",
        # "us915",
        # "us915_a",
        # "au915_a",
    ]
)
def current_region(request) -> str:
    return request.param


REGION_CONFIGS: dict[str, Any] = {
    "eu868": {
        "region_name": "eu868",
        "region_topic": "eu868",
        "region_common_name": "EU868",
        "uplink": dict(spreading=12, bandwidth=125000, frequency=867100000),
        "multicast": dict(dr=0, frequency=869525000),
    },
    "as923": {
        "region_name": "as923",
        "region_topic": "as923",
        "region_common_name": "AS923",
        "uplink": dict(spreading=12, bandwidth=125000, frequency=923200000),
        "multicast": dict(dr=2, frequency=923200000),
    },
    "as923_2": {
        "region_name": "as923_2",
        "region_topic": "as923_2",
        "region_common_name": "AS923_2",
        "uplink": dict(spreading=12, bandwidth=125000, frequency=921400000),
        "multicast": dict(dr=0, frequency=921400000),
    },
    "us915": {
        "region_name": "us915",
        "region_topic": "us915",
        "region_common_name": "US915",
        "uplink": dict(spreading=10, bandwidth=125000, frequency=906300000),
        "multicast": dict(dr=8, frequency=923300000),
    },
    "us915_a": {
        "region_name": "us915_a",
        "region_topic": "us915_a",
        "region_common_name": "US915",
        "uplink": dict(spreading=10, bandwidth=125000, frequency=902300000),
        "multicast": dict(dr=8, frequency=923300000),
    },
    "au915_a": {
        "region_name": "au915_a",
        "region_topic": "au915_a",
        "region_common_name": "AU915",
        "uplink": dict(spreading=12, bandwidth=125000, frequency=915200000),
        "multicast": dict(dr=2, frequency=923200000),
    },
}


@pytest.fixture
def region_params(current_region) -> dict[str, Any]:
    return REGION_CONFIGS[current_region]


@pytest.fixture
async def mqtt_client(region_params) -> MQTTClient:
    # TODO: shutdown tests if could not connect to mqtt
    client = MQTTClient(
        "mqtt://localhost:1883", client_id=uuid.uuid4().hex, topics_prefix=region_params["region_topic"]
    )
    stop = asyncio.Event()
    stop.clear()

    client_task = asyncio.create_task(client.run(stop))

    yield client

    stop.set()
    await client_task


@pytest.fixture
async def chirpstack_api() -> ChirpStackExtendedApi:
    try:
        chirpstack_api = ChirpStackExtendedApi.from_url("http://localhost:8080/")
        await chirpstack_api.authenticate("admin", "admin")
    except Exception as e:
        return pytest.exit(f"Could not connect to grpc api: {e}")
    return chirpstack_api


@pytest.fixture()
async def tenant_id(chirpstack_api: ChirpStackExtendedApi):
    tenants = [tenant async for tenant in chirpstack_api.get_tenants()]
    tenant_id = tenants[0].id
    yield tenant_id


@pytest.fixture
async def gateway(tenant_id: str, chirpstack_api: ChirpStackExtendedApi):
    gateway_id = secrets.token_hex(8)
    params = dict(
        gateway_id=gateway_id,
        name="pytest-gw-" + gateway_id,
        tenant_id=tenant_id,
        description="Autogenerated by ran-chirpstack-bridge",
    )
    await chirpstack_api.create_gateway(**params)

    yield params

    await chirpstack_api.delete_gateway(gateway_id)


@pytest.fixture
async def application(request, tenant_id: str, chirpstack_api: ChirpStackExtendedApi):
    """
    Use this fixture like this:
    @pytest.mark.parametrize("application", [{"name": "test-application"}], indirect=True)
    """
    if hasattr(request, "param"):
        params = request.param.copy()
    else:
        params = {}

    params.update({"tenant_id": tenant_id})
    if "name" not in params:
        params["name"] = "bridge-test-application"

    application_id = await chirpstack_api.create_application(**params)
    params.update({"id": application_id})

    yield params

    await chirpstack_api.delete_application(application_id)


@pytest.fixture()
async def device_profile(request, tenant_id: str, chirpstack_api: ChirpStackExtendedApi, region_params):
    """
    Use this fixture like this:
    @pytest.mark.parametrize(
        "device_profile",
        [{"name": "test-otaa-class-c-profile", "supports_otaa": True, "supports_class_c": True}],
        indirect=True,
    )
    """
    if hasattr(request, "param"):
        params = request.param.copy()
    else:
        params = {}

    params.update({"tenant_id": tenant_id, "tags": {"ran": "yes"}, "region": region_params["region_common_name"]})
    if "name" not in params:
        params["name"] = "bridge-test-device-profile"

    device_profile_id = await chirpstack_api.create_device_profile(**params)
    params.update({"id": device_profile_id})

    yield params

    await chirpstack_api.delete_device_profile(device_profile_id)


@pytest.fixture
async def device_otaa(chirpstack_api: ChirpStackExtendedApi, application, device_profile):
    device_params = {
        "app_eui": "0" * 16,
        "dev_eui": secrets.token_hex(8),
        "name": "test-uplink-dev-abp",
        "application_id": application["id"],
        "device_profile_id": device_profile["id"],
        "skip_fcnt_check": True,
        "tags": {},
    }
    dev_eui = await chirpstack_api.create_device(**device_params)

    device_keys = {
        "dev_eui": dev_eui,
        "nwk_key": secrets.token_hex(16),
        "app_key": "0" * 32,
    }
    await chirpstack_api.create_device_keys(**device_keys)

    yield dict(list(device_params.items()) + list(device_keys.items()))

    await chirpstack_api.delete_device(dev_eui)


@pytest.fixture
async def device_abp(chirpstack_api: ChirpStackExtendedApi, application, device_profile):
    device_params = {
        "dev_eui": secrets.token_hex(8),
        "name": "test-abp-uplink-dev-abp",
        "application_id": application["id"],
        "device_profile_id": device_profile["id"],
        "skip_fcnt_check": True,
        "tags": {},
    }
    dev_eui = await chirpstack_api.create_device(**device_params)

    device_keys = {
        "dev_eui": dev_eui,
        "dev_addr": secrets.token_hex(4),
        "app_s_key": secrets.token_hex(16),
        "nwk_s_enc_key": secrets.token_hex(16),
    }
    await chirpstack_api.activate_device(**device_keys)

    yield dict(list(device_params.items()) + list(device_keys.items()))

    await chirpstack_api.delete_device(dev_eui)


@pytest.fixture
async def multicast_group(chirpstack_api: ChirpStackExtendedApi, application, region_params):
    params = dict(
        name="test-multicast-group",
        application_id=application["id"],
        region=region_params["region_common_name"],
        mc_addr=secrets.token_hex(4),
        mc_nwk_s_key=secrets.token_hex(16),
        mc_app_s_key=secrets.token_hex(16),
        group_type="CLASS_C",
        dr=region_params["multicast"]["dr"],
        frequency=region_params["multicast"]["frequency"],
    )
    mc_id = await chirpstack_api.create_multicast_group(**params)
    params.update({"id": mc_id})

    yield params

    await chirpstack_api.delete_multicast_group(mc_id)


@pytest.fixture
async def chirpstack_router(
    chirpstack_api: ChirpStackExtendedApi, mqtt_client: MQTTClient, tenant_id, gateway, application
):
    app_id = application["id"]
    gw_id = gateway["gateway_id"]

    devices = ApplicationDeviceList(chirpstack_api, application_id=app_id, tenant_id=tenant_id, tags={"ran": "yes"})
    await devices.sync_from_remote()

    multicast_groups = ApplicationMulticastGroupList(chirpstack_api, application_id=app_id, tenant_id=tenant_id)
    await multicast_groups.sync_from_remote()

    chirpstack_router = ChirpstackTrafficRouter(
        gateway_mac=gw_id,
        chirpstack_mqtt_client=mqtt_client,
        devices=devices,
        multicast_groups=multicast_groups,
    )

    async def force_sync():
        await devices.sync_from_remote()
        await multicast_groups.sync_from_remote()

    # This is extra method, which can be used to sync devices/multicast groups from chirpstack without periodic update
    chirpstack_router.force_sync = force_sync

    yield chirpstack_router
